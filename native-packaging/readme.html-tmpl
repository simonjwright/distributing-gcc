<html lang="en">
<head>
    <meta http-equiv="content-type" content="text/html; charset=iso-8859-1">
    <title>README for GCC RELEASE (ARCH)</title>
</head>
<body>
<h1>README for GCC RELEASE (ARCH)</h1>

<!-- insert the release_notes.html, as generated from
     release_notes.md, here -->

<p>This is GCC 13.1.0 built on macOS Ventura (13, Darwin 22) but able to run on Monterey, for Apple silicon (M1), with Command Line Utilities 14.2.0 and Python 3.9.13.</p>

<p><strong>gcc-13.1.0-aarch64-apple-darwin21.pkg</strong></p>

<p>Compiler sources are from <a href="https://github.com/iains/gcc-13-branch">https://github.com/iains/gcc-13-branch</a> at tag <code>gcc-13.1-darwin-r0</code>.</p>

<p>Compilers included: Ada, C, C++.</p>

<p>Tools included (all at version 23.0.0, and all with the  <a href="http://www.gnu.org/licenses/gcc-exception-faq.html">Runtime Library Exception</a>):</p>

<ul>
<li>AUnit from <a href="https://github.com/AdaCore/aunit">https://github.com/AdaCore/aunit</a></li>
<li>GNATCOLL from:

<ul>
<li><a href="https://github.com/AdaCore/gnatcoll-core">https://github.com/AdaCore/gnatcoll-core</a></li>
<li><a href="https://github.com/AdaCore/gnatcoll-bindings">https://github.com/AdaCore/gnatcoll-bindings</a> (ZLIB is included, OMP and LZMA are not (the GNATCOLL version for LZMA requires thread support in the system library, not available on macOS))</li>
<li><a href="https://github.com/AdaCore/gnatcoll-db">https://github.com/AdaCore/gnatcoll-db</a> (only the SQLite backend)</li>
</ul>
</li>
<li>Gprbuild from <a href="https://github.com/AdaCore/gprbuild">https://github.com/AdaCore/gprbuild</a></li>
<li>Gprconfig_kb from <a href="https://github.com/AdaCore/gprconfig_kb">https://github.com/AdaCore/gprconfig_kb</a></li>
<li>Langkit from <a href="https://github.com/AdaCore/langkit">https://github.com/AdaCore/langkit</a></li>
<li>Libadalang from <a href="https://github.com/AdaCore/libadalang">https://github.com/AdaCore/libadalang</a></li>
<li>Libadalang tools from <a href="https://github.com/AdaCore/libadalang-tools">https://github.com/AdaCore/libadalang-tools</a></li>
<li>Template Parser from  <a href="https://github.com/AdaCore/templates-parser">https://github.com/AdaCore/templates-parser</a></li>
<li>XMLAda from <a href="https://github.com/AdaCore/xmlada">https://github.com/AdaCore/xmlada</a></li>
</ul>


<p>Target: aarch64-apple-darwin21</p>

<p>Configured with:</p>

<pre><code>--prefix=/opt/gcc-13.1.0-aarch64
--without-libiconv-prefix
--disable-libmudflap
--disable-libstdcxx-pch
--disable-libsanitizer
--disable-libcc1
--disable-libcilkrts
--disable-multilib
--disable-nls
--enable-languages=c,c++,ada
--host=aarch64-apple-darwin21
--target=aarch64-apple-darwin21
--build=aarch64-apple-darwin21
--without-isl
--with-build-sysroot=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk
--with-sysroot=
--with-specs=&apos;%{!sysroot=*:--sysroot=%:if-exists-else(/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk
/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk)}&apos;
--with-as=/usr/bin/as
--with-ld=/usr/bin/ld
--with-ranlib=/usr/bin/ranlib
--with-dsymutil=/usr/bin/dsymutil
--with-build-config=no
--enable-bootstrap
CFLAGS=-Wno-deprecated-declarations
CXXFLAGS=-Wno-deprecated-declarations</code></pre>


<h2 id="install">Install</h2>

<p>One of <em>Xcode</em> or the Command Line Tools is required.</p>

<p><em>Xcode</em> can be downloaded from the App Store.<br/>
Install the Command Line Tools by <code>sudo xcode-select --install</code>.</p>

<p>If you suspect your copy of the Command Line Tools is old, you can delete it by</p>

<pre><code>sudo rm -rf /Library/Developer/CommandLineTools</code></pre>


<p>and re-install.</p>

<p>Download the binary <code>.pkg</code>. It&rsquo;s not signed, so <strong>don&rsquo;t</strong> double-click on it; instead, right-click on it and <em>Open</em>. Accept the warning. You will be guided through the installation.</p>

<h3 id="setting-path">Setting PATH</h3>

<p><code>PATH</code> needs to be set to include <code>/opt/gcc-13.1.0-aarch64/bin</code> at the front:</p>

<h4 id="bash"><code>bash</code></h4>

<p>Insert</p>

<pre><code>export PATH=/opt/gcc-13.1.0-aarch64/bin:$PATH</code></pre>


<p>in your <code>~/.bash_profile_common</code>.</p>

<h4 id="zsh"><code>zsh</code></h4>

<p>Likewise, but in <code>~/.zshrc</code>.</p>

<p>See <a href="https://scriptingosx.com/2019/06/moving-to-zsh/">here</a> for helpful information on moving to <code>zsh</code>.</p>

<h2 id="notes">Notes</h2>

<p>The software was built using the <a href="https://github.com/simonjwright/building-gcc-macos-native">building-gcc-macos-native</a> scripts at Github, tag <code>gcc-13.1.0-aarch64</code>.</p>

<p>All compilations were done with <code>export MACOSX_DEPLOYMENT_TARGET=12</code> so that libraries and executables are compatible with macOS Monterey and later.</p>

<h3 id="compiler">Compiler</h3>

<p>The compiler is GPL version 3. The runtime has the GCC Runtime Exception, so executables built with it can be released on proprietary terms.</p>

<h3 id="gmp,-mpfr,-mpc">GMP, MPFR, MPC</h3>

<p>These libraries (releases 6.2.1, 4.1.0, 1.2.1 respectively) are installed with the compiler.</p>

<h3 id="other-sources">Other sources</h3>

<p>The following patches to the v23.0.0 versions were needed to allow the builds to see the new compiler.</p>

<h4 id="xml/ada">XML/Ada</h4>

<pre><code>diff --git a/Makefile.in b/Makefile.in
index 14d3dc4..26707d7 100644
--- a/Makefile.in
+++ b/Makefile.in
@@ -35,13 +35,9 @@ MODULES=unicode input_sources sax dom schema
 MODULE_INSTALL=${MODULES:%=%_inst}
 
 GPROPTS=-XXMLADA_BUILD_MODE=${MODE} -XPROCESSORS=${PROCESSORS}
+GPROPTS+=--target=${TARGET_ALIAS}
 
-ifeq (${HOST},${TARGET})
 IPREFIX=${DESTDIR}${prefix}
-else
-GPROPTS+=--target=${TARGET_ALIAS}
-IPREFIX=${DESTDIR}${prefix}/${TARGET_ALIAS}
-endif
 
 ifdef RTS
 GPROPTS+=--RTS=${RTS}</code></pre>


<h4 id="gprbuild">Gprbuild</h4>

<pre><code>diff --git a/Makefile b/Makefile
index d4de8894..6fddd346 100644
--- a/Makefile
+++ b/Makefile
@@ -37,13 +37,7 @@ LIB_DIR       = lib/
 # Load current setup if any
 -include makefile.setup
 
-# target options for cross-build
-ifeq ($(HOST),$(TARGET))
-GTARGET=
-# INSTALLER=exe/$(BUILD)/$(LIB_INSTALLER)
-else
 GTARGET=--target=$(TARGET)
-endif
 
 INSTALLER=$(LIB_INSTALLER)
 EXEC_INSTALLER=$(INSTALLER) -XBUILD=${BUILD}</code></pre>


<h3 id="include,-library-paths">Include, library paths</h3>

<p>As noted <a href="https://forward-in-code.blogspot.com/2022/03/which-sdk-choices-choices.html">here</a>, Apple have changed the location of system include files and libraries; they used to be copied from the SDKs to the &ldquo;standard&rdquo; <code>/usr/include</code> and <code>/usr/lib</code> either automatically or on command.</p>

<p>This compiler has been built so you don&rsquo;t need to take any related action to use it: unfortunately, this means that paths in <code>/usr/local</code> and <code>/Library/Frameworks</code> aren&rsquo;t searched.</p>

<h2 id="distribution">Distribution</h2>

<p>The distribution was prepared using the <a href="https://github.com/simonjwright/distributing-gcc">distributing-gcc project</a> at Github, tag <code>gcc-13.1.0-aarch64</code>.</p>
</body>
